<%# HHS will never set this ENV. GSA invites will not inject the stylesheet
    into the embedding document without explicit param. %>
<% style_page = (ENV['INVITE_SKIP_PARENT_STYLE'].blank? || params[:style_page].present?) ? 'true' : 'false' %>

/* Use an immediately invoked function to isolate variables */
(function(){
  var _mainContentId = "<%= params[:content_id] || 'main-content' %>";
  var _mobileTargetId = "<%= params[:mobile_target_id] %>";

  // Fix for window.location.origin for IE
  if (!window.location.origin) {
    window.location.origin = window.location.protocol + "//" +
      window.location.hostname + (window.location.port ? ':' +
      window.location.port: '');
  }

  /* main - Main function for the voc invitation.
   */
  function main() {
    if(VOC.fn.isMobile(navigator.userAgent || navigator.vendor || window.opera)) {
      var _target = document.getElementById(_mobileTargetId);
      var targetHTML = _target.innerHTML;
      var pageurl  = window.location.origin + window.location.pathname;
      var popurl = "//<%= APP_CONFIG['host'] %>/surveys/<%= @survey.id %>?";
      <% if params[:stylesheet] %>
          popurl = popurl + "stylesheet=<%= params[:stylesheet] %>&";
      <% end %>
      <% if @test_invitation %>
        popurl = popurl + "&test_invitation=true"
      <% end %>
      popurl = popurl + "page_url=" + pageurl;
      var aTag = "<a href='" + popurl + "' target='_blank'>" + targetHTML + "</a>";
      _target.innerHTML = aTag;
    } else {
      /* Hide the mobile target div */
      var mobileTarget = document.getElementById(_mobileTargetId);
      if(mobileTarget)
        mobileTarget.style.display = 'none';
      var cookieName = 'survey_invitation_<%= params[:survey_id] %>';
      var invitationInterval = <%= @survey.invitation_interval %>;
      if(invitationInterval == 0 || readCookie(cookieName) == null || <%= @test_invitation %>) {
        var invite = false;
        <% if @test_invitation %>
          invite = true
        <% elsif @survey.invitation_percent > 0 %>
          invite = Math.random() < <%= @survey.invitation_percent %> / 100
        <% end %>
        if(invite) {
          if (<%= style_page %>) {
            /* Load the passed stylesheet into the page */
            var stylesheet = '<%= params[:stylesheet] %>';
            if(stylesheet.length > 0) {
              var stylesheetLinkNode = document.createElement('link');
              stylesheetLinkNode.rel = "stylesheet";
              stylesheetLinkNode.type = "text/css";
              stylesheetLinkNode.href = stylesheet;
              document.querySelector('head')
                .appendChild(stylesheetLinkNode);
            }
          }

          loadModal();
          <% unless @test_invitation %>
            if(invitationInterval > 0) {
              createCookie(cookieName, true, invitationInterval);
            }
          <% end %>
        }
      }
    }
  }

  function createCookie(name,value,days) {
    if (days) {
      var date = new Date();
      date.setTime(date.getTime()+(days*24*60*60*1000));
      var expires = "; expires="+date.toGMTString();
    }
    else var expires = "";
    document.cookie = name+"="+value+expires+"; path=/";
  }

  function readCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0;i < ca.length;i++) {
      var c = ca[i];
      while (c.charAt(0)==' ') c = c.substring(1,c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
  }


  /*
  ============================================
  License for Application
  ============================================
  This license is governed by United States copyright law, and with respect to matters
  of tort, contract, and other causes of action it is governed by North Carolina law,
  without regard to North Carolina choice of law provisions. The forum for any dispute
  resolution shall be in Wake County, North Carolina.
  Redistribution and use in source and binary forms, with or without modification, are
  permitted provided that the following conditions are met:
  1. Redistributions of source code must retain the above copyright notice, this list
  of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice, this
  list of conditions and the following disclaimer in the documentation and/or other
  materials provided with the distribution.
  3. The name of the author may not be used to endorse or promote products derived from
  this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  // jQuery formatted selector to search for focusable items
  var focusableElementsString = "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]:not([tabindex='-1'])";

  // store the item that has focus before opening the modal window
  var focusedElementBeforeModal;

  function loadModal() {
    showInvitation();

    /* Add class level event bindings */
    var modal = document.getElementById("vocModal");
    var selector = ".vocCancelButton, .vocModalCloseButton, .cancel, " +
      "#vocCancelButton, #vocModalCloseButton, #cancel";
    VOC.fn.on(modal, selector, "click", function(e) {
      hideModal();
    });

    VOC.fn.on(modal, "#vocModalCloseButton", "keydown", function(e) {
      trapSpaceKey(this, e, hideModal);
    });

    /* Add Id event bindings */
    VOC.fn.addEventListener(document.getElementById('startModal'), 'click', function(e) {
      showModal(document.getElementById('vocModal'));
    });
    VOC.fn.addEventListener(document.getElementById('vocEnter'), 'click', function(e) {
      enterButtonModal();
    });
    VOC.fn.addEventListener(document.getElementById('vocModal'), 'keydown', function(e) {
      trapTabKey(this, e);
    });
    VOC.fn.addEventListener(document.querySelector('body'), 'keydown', function(e) {
      trapEscapeKey(this, e);
    });
  }

  function trapSpaceKey(_obj, evt, f) {
    // if space key pressed
    if (evt.which == 32) {
        // fire the user passed event
        f();
        evt.preventDefault();
    }
  }

  function trapEscapeKey(_obj, evt) {
    // if escape pressed
    if (evt.which == 27) {
      hideModal();
      evt.preventDefault();
    }

  }

  function trapTabKey(obj, evt) {

      // if tab or shift-tab pressed
      if (evt.which == 9) {

          // get list of all children elements in given object
          var o = obj.querySelectorAll(focusableElementsString);

          // get list of focusable items
          var focusableItems;
          focusableItems = Array.prototype.filter.call(o, function(el) {
            return (el.offsetWidth > 0 || el.offsetHeight > 0 ||
                el.getClientRects().length > 0);
          });

          // get currently focused item
          var focusedItem;
          focusedItem = document.activeElement;

          // get the number of focusable items
          var numberOfFocusableItems;
          numberOfFocusableItems = focusableItems.length

          // get the index of the currently focused item
          var focusedItemIndex;
          focusedItemIndex = focusableItems.indexOf(focusedItem);

          if (evt.shiftKey) {
              //back tab
              // if focused on first item and user preses back-tab, go to the last focusable item
              if (focusedItemIndex == 0) {
                  focusableItems[numberOfFocusableItems - 1].focus();
                  evt.preventDefault();
              }

          } else {
              //forward tab
              // if focused on the last item and user preses tab, go to the first focusable item
              if (focusedItemIndex == numberOfFocusableItems - 1) {
                  focusableItems[0].focus();
                  evt.preventDefault();
              }
          }
      }

  }

  function enterButtonModal() {
    var modalSurvey = <%= params[:modal] == 'true' %>;
    incrementInvitationAcceptCount();
    if(modalSurvey) {
      openSurveyInModal();
    } else {
      openSurveyInNewWindow();
    }
  }

  function incrementInvitationAcceptCount() {
    invitationurl = "//<%= APP_CONFIG['host'] %>/surveys/<%= @survey.id %>/invitation_accept"
    <% if @test_invitation %>
      invitationurl = invitationurl + "?test_invitation=true"
    <% end %>
    VOC.fn.get(invitationurl);
  }

  function openSurveyInModal() {
    var widgetUrl = "//<%= APP_CONFIG['host'] %>/widget/widget.js?target_id=modalContents&survey_id=<%= @survey.id %>&focus=true"
    VOC.fn.getScript(widgetUrl, function() {
      hideModal();
      showModal(document.getElementById("vocModal"));
      VOC.fn.focusFirstElementIn(document.getElementById("vocModal"));
    });
  }

  function openSurveyInNewWindow() {
    // BEGIN logic for executing the Enter button action for the modal window
    var pageurl  = window.location.origin + window.location.pathname;
    var popurl = "//<%= APP_CONFIG['host'] %>/surveys/<%= @survey.id %><%= '/holding_page' if ENV['USE_START_PAGE'].present? %>?";
    <% if params[:stylesheet] %>
    popurl = popurl + "stylesheet=<%= params[:stylesheet] %>&";
    <% end %>
    popurl = popurl + "page_url=" + pageurl;
    <% if @test_invitation %>
      popurl = popurl + "&test_invitation=true"
    <% end %>
    window.open(popurl,"","width=600,height=<%= ENV['USE_START_PAGE'].present? ? '400' : '500' %>,scrollbars,");
    // END logic for executing the Enter button action for the modal window
    hideModal();
  }

  function showInvitation() {
    var targetId = '<%= params[:target_id] %>';
    var modalSurvey = <%= params[:modal] == 'true' %>;
    document.getElementById(targetId)
      .innerHTML = "<%= escape_javascript(render('invite_modal')) %>";
    if(modalSurvey== true && '<%= @survey.suppress_invitation %>' == 'true') {
      enterButtonModal();
    }
    showModal(document.getElementById('vocModal'));
  }

  function setFocusToFirstItemInModal(obj){
    // get list of all children elements in given object
    var o = obj.find('*');

    // set the focus to the first keyboard focusable item
    o.filter(focusableElementsString).filter(':visible').first().focus();
  }

  function showModal(obj) {
    var mainContent = document.getElementById(_mainContentId)
    if(mainContent)
      mainContent.setAttribute('aria-hidden', true);
    document.getElementById('vocModalOverlay').style.display = 'block';
    obj.style.display = 'block';
    obj.setAttribute('aria-hidden', false);
    document.querySelector('body').style.overflow = 'hidden';

    // attach a listener to redirect the tab to the modal window if the user
    // somehow gets out of the modal window
    if(mainContent) {
      VOC.fn.addEventListener(mainContent, 'focusin', function(e) {
        VOC.fn.focusFirstElementIn(obj);
      });
    }

    // save current focus
    focusedElementBeforeModal = document.activeElement;
    VOC.fn.focusFirstElementIn(obj);
  }

  function hideModal() {
    document.getElementById('vocModalOverlay').style.display = 'none';
    document.getElementById('vocModal').style.display = 'none';
    document.querySelector('body').style.overflow = 'visible';
    document.getElementById('vocModal').setAttribute('aria-hidden', true);
    if(document.getElementById(_mainContentId))
      document.getElementById(_mainContentId).setAttribute('aria-hidden', false);

    // set focus back to element that had it before the modal was opened
    focusedElementBeforeModal.focus();
  }


  /*
   * The below code is used to load the VOC tool and show the invitation once
   * the page content has been loaded.
   */
  var countScriptCalled = 0;

  /* Called once the VOC library has been loaded */
  function scriptLoadHandler(){
    countScriptCalled++;
    if(countScriptCalled > 1) return;
    var interval = setInterval(function(){
      if(VOC.fn !== undefined) {
        clearInterval(interval);
        main();
      }
    }, 100);
  }


  /* Load the VOC library helper functions */
  function loadLibraryFunctions() {
    var script_tag = document.createElement('script');
    script_tag.setAttribute('type', 'text/javascript');
    script_tag.setAttribute('src',
        "//<%= APP_CONFIG['host'] %>/assets/voc.fn.js");

    /* Wait for the script to load */
    //Other browsers
    if(script_tag.addEventListener) {
      script_tag.addEventListener("load", scriptLoadHandler, false);
    }
    // For Old versions of IE
    else if(script_tag.readyState) {
      script_tag.onreadystatechange = scriptLoadHandler;
    }

    // Try to find the head, otherwise default to the documentElement
    (document.getElementsByTagName("head")[0] || document.documentElement)
      .appendChild(script_tag);
  }

  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    loadLibraryFunctions();
  }

  /* Handle the case where we don't execute this code until after the DOM has
   * finished loading.
   */
  if(document.readyState === "complete" ||
      (document.readyState !== "loading" && !document.documentElement.doScroll) ){
    window.setTimeout(loadLibraryFunctions());
  } else {
    document.addEventListener("DOMContentLoaded", completed);
    window.addEventListener("load", completed);
  }

})();
