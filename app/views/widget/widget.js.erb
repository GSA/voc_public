/* Use an immediately invoked function to isolate widget variables */
(function(){

  <%= render 'load_jquery' %>

  /* main - Main function for the voc widget.  This function is called once */
  /* jQuery has been loaded.                                                */
  function main() {
    /* create the voc object */
    window.VOC = {
      Survey: survey
    }
    /* Add the survey control methods to the voc object */
    addControlMethods(window.VOC, jQuery);

    survey = VOC.Survey({surveyID: <%= params[:survey_id].to_i %>});
    <% unless params[:target_id].blank? %>
      survey.setTargetID('<%= params[:target_id] %>');
    <% end %>
    survey.loadSurvey();
  }

  /* define the survey module using the revealing module pattern.          */
  function survey(opts){
    var _opts = opts || {};

    var _targetID = _opts.targetID || "vocSurveyDiv";
    var _pageURL  = _opts.pageURL  || (window.location.origin + window.location.pathname);
    var _surveyID = _opts.surveyID;
    var _this = this;

    /* getters and setters for private variables */
    function getTargetID()         { return _targetID; }
    function getSurveyID()         { return _surveyID; }
    function getPageURL()          { return _pageURL;  }

    function setTargetID(targetID) { _targetID = targetID; }
    function setPageURL(url)       { _pageURL = url; }


    /* loadSurvey(success: FunctionPointer, error: FunctionPointer)       */
    /* Attempt to load the survey with id _surveyID into the DOM element  */
    /* with id _targetID.                                                 */
    function loadSurvey() {
      var _hostname = "<%= APP_CONFIG['host'] %>";
      var _url = "http://"+ _hostname + "/surveys/" + _surveyID + ".json";
      var target = jQuery("#" + _targetID)
      var surveyID = _surveyID

      /* get the survey identified by id _surveyID and insert it into the */
      /* DOM element _targetID.                                           */
      jQuery.getJSON(_url, "callback=?&page_url=" + _pageURL, function(data){
        target.html(data.html);
      });

      jQuery(document).on("submit", "#"+_targetID+" form", function(){

        // create and post to a hidden iframe to avoid cross-domain POST limitations
        var iframe = jQuery("<iframe height='0' width='0' tabindex='-1' title='empty'>");
        var uniqueString = "surveyPostContainerIframe";
        var form = target.children("form").first();

        // add the hidden iframe
        jQuery("body").append(iframe);
        iframe.hide();

        // direct the form post into the iframe's window
        iframe[0].contentWindow.name = uniqueString;
        form.attr("target", uniqueString);
        form.attr("action", 'http://' + _hostname + '/survey_responses');

        // call the native submit, not the jQuery submit wrapper
        // this is to avoid hitting this handler twice (and looping)
        form[0].submit();

        // pull back the thank you page
        jQuery.getJSON("http://" + _hostname + "/surveys/" + _surveyID + "/thank_you_page.json", "callback=?", function(data){
          jQuery("#" + _targetID).html(data.html);
        });

        return false;
      });

      return _this;
    }

    return {
      /* Define the publicly accessible methods */
      getTargetID: getTargetID,
      getSurveyID: getSurveyID,
      getPageURL:  getPageURL,
      setTargetID: setTargetID,
      loadSurvey: loadSurvey
    };
  };

  function addControlMethods(voc, $) {
    var page_url,
  		changeTimer,
  		changeInterval = 5000,
  		lastSubmitted;

  	/* Private Functions */
  	function show_next_page(page) {
  		var required_unanswered = false;
  		required_unanswered = check_for_unanswered_required(page);

  		if (!required_unanswered){
  			$("#page_" + page).hide();
  			var next_page = $("#page_" + page + "_next_page").val();

  				/* Set the prev page on next page */
  				set_prev_page(page, next_page);

  			$("#page_"+ next_page).show();
  			window.location.hash="PAGE_" + next_page;

  			var title = $(document).prop("title");
  			$(document).prop("title", replace_page_number_in_title(title, next_page));
  		} else {
  			alert(survey_required_fields_error);
  		}
  	}

  	function check_for_unanswered_required(page) {
  		required = false;
  			$("#page_"+page+" input[type=hidden].required_question").each(function(index){
  				if($(this).val() == 'true'){
  					question_number = $(this).attr('id').split('_')[1];  // q_{number}_required
  					/* if the element is a radio button that is required then check to make sure one is checked */
  					if( $(".question_" + question_number + "_answer").attr('type') == "radio" && $(".question_" + question_number + "_answer:checked").length == 0 ) {
  						required =  true;
  					} else if( $("select.question_" + question_number + "_answer").length > 0 && $("select.question_" + question_number + "_answer").val() == "" ) {
  						required =  true;
  					} else if( $(".question_" + question_number + "_answer").attr('type') == "checkbox" && $(".question_" + question_number + "_answer").length > 0 && $(".question_" + question_number + "_answer:checked").length == 0 ) {
  						required =  true;
  					} else if( $(".question_" + question_number + "_answer").attr('type') == "text" && $(".question_" + question_number + "_answer").val() == "") {
  						required =  true;
  					} else if( $(".question_" + question_number + "_answer").prop('tagName').toLowerCase() == "textarea" && $(".question_" + question_number + "_answer").val() == "") {
  						/* a textarea does not have a an attr('type') so use the prop('tagName') */
  						required =  true;
  					}
  				}
  			});
  			return required;
  	}

  	function replace_page_number_in_title(title, number) {
  		return title.replace(/ - Page \d+ - /, " - Page " + number + " - ");
  	}

  	function show_prev_page(page){
  		$("#page_"+page).hide();
  	  $("#page_"+ $("#page_" + page + "_prev_page").val() ).show();
  		window.location.hash = "PAGE_" + (prev_page || 1);

  		var title = $(document).prop("title");
  		$(document).prop("title", replace_page_number_in_title(title, prev_page));
  	}

  	function set_next_page(current_page, next_page) {
  		$("#page_" + current_page + "_next_page").val(next_page);
  		$("#page_" + next_page + "_prev_page").val(current_page);
  	}

  	function set_prev_page(current_page, prev_page) {
  		$("#page_" + prev_page + "_prev_page").val(current_page);
  	}

  	function validate_before_submit(page){
  		if (!check_for_unanswered_required(page)){
  			return true;
  		} else {
  			alert(survey_required_fields_error);
  			return false;
  		}

  	}

  	/* Publicly available functions through the VOC object */
    voc.onPageLoad = function() {
  		page_url = $("#response_page_url");
  		if(page_url.val() == "" && parent) {
  			page_url.val(parent.document.location.origin + parent.document.location.pathname);
  		}

  		lastSubmitted = new Date().getTime()-changeInterval;

  		// Add on change handlers
  		$(".voc-form").on("change", function(event) {
  			timer_form($(this).serialize());
  		})

  		function timer_form(form_data) {
  			// if not submitted in the last 10 seconds, submit the survey
  			clearTimeout(changeTimer);
  			changeTimer = setTimeout(post_form(form_data), changeInterval);
  		}

  		function post_form(form_data){
  	    if((new Date().getTime() - lastSubmitted) > changeInterval){
  	      lastSubmitted = new Date().getTime();
  	      $.post( "/survey_responses/partial",form_data);
  	    }
  	  }
  	}
  	voc.show_next_page = show_next_page;
  	voc.show_prev_page = show_prev_page;
  	voc.validate_before_submit = validate_before_submit;
  }
})();
